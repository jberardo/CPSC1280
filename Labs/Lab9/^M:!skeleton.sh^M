#!/bin/bash

#===============================================================================
#
#          FILE: skeleton.sh
#
#         USAGE: ./skeleton.sh
#
#   DESCRIPTION: Skeleton script to build a system resource monitor
#                This script has four options listed below
#
#       OPTIONS:
#                  a - Display memory usage information (free -k)
#                  b - Display disk space information (df -h)
#                  c - Display process information (ps u)
#                  o - Display options menu
#                  q - Quit
#        AUTHOR: Joao Berardo
#  ORGANIZATION: Langara
#       CREATED: 2017-07-07 08:59:02 PM
#      REVISION:  1.0
#===============================================================================

#-------------------------------------------------------------------------------
# TRAP / CLEANUP
#-------------------------------------------------------------------------------
# traps codes / signals
# 1 - SIGHUP
# 2 - SIGINT
# 3 - SIGQUIT
# 9 - SIGKILL (can't trap)
# 15 - SIGTERM
trap "cleanUp 1" SIGHUP SIGINT SIGQUIT SIGTERM   # clean up before exit

#-------------------------------------------------------------------------------
# DEBUG / TERMINAL OPTIONS
#-------------------------------------------------------------------------------
set -o nounset                                   # treat unset variables as an error
#set -e                                           # exit if any line in the script fails
#set -x                                           # prints each command that is going to be executed
#stty -echo                                       # disable normal echoing in the terminal

#-------------------------------------------------------------------------------
# GLOBAL VARS
#-------------------------------------------------------------------------------
REFRESH=1                                        # time (in seconds) to refresh the screen
optsMenu=1                                       # 1 - show menu / 0 - hide menu
optsMem=0                                        # 1 - show mem info / 0 - hide mem info
optsDisk=0                                       # 1 - show disk info / 0 - hide disk info
optsPs=0                                         # 1 - show process info / 0 - hide process info

#-------------------------------------------------------------------------------
# COLORS / FORMAT
#-------------------------------------------------------------------------------
RED="$(tput setaf 1)"                            # foreground red
GREEN="$(tput setaf 2)"                          # foreground green
WHITE="$(tput setaf 7)"                          # foreground white
BOLD="$(tput bold)"                              # bold text
UL="$(tput smul)"                                # underline text
STD="$(tput sgr0)"                               # normal font/colors

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  main()
#   DESCRIPTION: main funtcion of the program
#-------------------------------------------------------------------------------
main()
{
  reset_screen
  display_screen                                 # show output
  read_option                                    # read user input
}

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  reset_screen()
#   DESCRIPTION:  resets the screen after each refresh
#-------------------------------------------------------------------------------
reset_screen()
{
  tput reset                                     # reset terminal screen
  tput cup 0 0                                   # cursor top left of the screen
  tput civis                                       # make the cursor invisible
}

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  display_screen()
#   DESCRIPTION:  display all the output on terminal screen
#-------------------------------------------------------------------------------
display_screen()
{
  if [[ optsMenu -eq 1 ]]
  then
    show_menu
  fi

  if [[ optsMem -eq 1 ]]
  then
    show_mem_info
  fi

  if [[ optsDisk -eq 1 ]]
  then
    show_disk_info
  fi

  if [[ optsPs -eq 1 ]]
  then
    show_process_info
  fi
}

#-------------------------------------------------------------------------------
# FRIENDLY MESSAGES
#-------------------------------------------------------------------------------

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  show_info()
#   DESCRIPTION:  display green message on screen
#    PARAMETERS:  text to display
#-------------------------------------------------------------------------------
show_info()
{
  echo -e "${GREEN}$*${STD}"
}

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  show_error()
#   DESCRIPTION:  display error message in red
#    PARAMETERS:  error message
#-------------------------------------------------------------------------------
show_error()
{
  echo -e "${RED}$*${STD}"
}

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  show_title()
#   DESCRIPTION:  format title output (title of each option)
#    PARAMETERS:  title text
#-------------------------------------------------------------------------------
show_title()
{
  echo -e "${BOLD}${WHITE}${UL}$*${STD}"
}

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  show_menu()
#   DESCRIPTION:  display menu options
#-------------------------------------------------------------------------------
show_menu()
{
  show_title "Options"
  echo "a) Show/Hide Memory Usage Information"
  echo "b) Show/Hide Disk Space Informaton"
  echo "c) Show/Hide Process Information"
  echo "o) Show/Hide List of Options"
  echo "q) Quit"
}


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  show_mem_info()
#   DESCRIPTION:  display memory usage information
#-------------------------------------------------------------------------------
show_mem_info()
{
  echo ""
  show_title "Memory Usage Information"
  free -kh || cleanUp 1
}

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  show_disk_info()
#   DESCRIPTION:  display disk usage information
#-------------------------------------------------------------------------------
show_disk_info()
{
  echo ""
  show_title "Disk Space Information"
  df -h || cleanUp 1
}

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  show_process_info()
#   DESCRIPTION:  display processes information
#-------------------------------------------------------------------------------
show_process_info()
{
  echo ""
  show_title "Process Information"
  ps -o user,pid,%cpu,%mem,tty,stat,start,time,comm | head -10 || cleanUp 1
}

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  read_option ()
#   DESCRIPTION:  read user pressed key for options
#    PARAMETERS:  option character (a, b, c or o)
#-------------------------------------------------------------------------------
read_option()
{
  # -t N (wait for a maximum of N seconds for user input)
  # -n N (read n characters)
  # -s (don't wait for enter to be pressed)
  local REPLY
  read -t $REFRESH -n 1 REPLY

  # call functions to change the global variables of each function (true/false)
  case $REPLY in
    a) toggle_mem ;;
    b) toggle_disk ;;
    c) toggle_ps ;;
    o) toggle_menu ;;
    q) cleanUp 0 ;;
    *) show_all ;;
  esac
}

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  toggle_menu()
#   DESCRIPTION:  change variable to show/hide menu
#-------------------------------------------------------------------------------
toggle_menu()
{
    if [[ $optsMenu -eq 0 ]]
    then
        optsMenu=1
    else
        optsMenu=0
    fi
}

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  toggle_mem()
#   DESCRIPTION:  change variable to show/hide memory usage
#-------------------------------------------------------------------------------
toggle_mem()
{
    if [[ $optsMem -eq 0 ]]
    then
        optsMem=1
    else
        optsMem=0
    fi
}

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  toggle_disk()
#   DESCRIPTION:  change variable to show/hide disk usage
#-------------------------------------------------------------------------------
toggle_disk()
{
    if [[ $optsDisk -eq 0 ]]
    then
        optsDisk=1
    else
        optsDisk=0
    fi
}

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  toggle_ps
#   DESCRIPTION:  change variable to show/hide process information
#-------------------------------------------------------------------------------
toggle_ps()
{
    if [[ $optsPs -eq 0 ]]
    then
        optsPs=1
    else
        optsPs=0
    fi
}

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  cleanUp()
#   DESCRIPTION:  perform cleanup on exit if needed
#    PARAMETERS:  error code
#-------------------------------------------------------------------------------
cleanUp()
{
  # clean up and exit with appropriate status
  #stty echo                                      # restore echoing
  reset_screen
  tput cnorm                                     # restore cursor

  if [[ $1 -lt 0 ]]
  then
    show_error "Error code: $1"
  else
    show_info "Exited sucessfully"
  fi

  # restore colors
  echo -e "${STD}"

  exit "$1"
}

#-------------------------------------------------------------------------------
# RUN PROGRAM
#-------------------------------------------------------------------------------
while :
do
  main
done
